<?php

/**
 * Pricelist
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Pricelist extends BasePricelist
{
   function getQuotes(){
     return Doctrine_Query::create()
        ->from('Quote q, q.Product p, q.Vendor v, p.Producttype pt')
        ->where('q.ref_class = "Pricelist"')
        ->andWhere('q.ref_id = '.$this->getId())
      	->andWhere('q.is_cancelled = 0')
        ->orderBy("p.name")
        ->execute();
	}

   //--pricelist module quickinput functions----------------------------------------
  	//responsibility: arrange buyquotes and sellquotes together in an array with productname as index
   function getQuickInputProductArrays(){
   	$quotes=$this->getQuotes();

		$array=array();
   	foreach($quotes as $quote)
   	{
   		$productname=$quote->getProduct()->getName();
   		if(!array_key_exists($productname,$array))
   		{
   		$array[$productname]=array(
									'product'=>$quote->getProduct(),
									'buy'=>null,
									'sell'=>null,
									);
   		}
   		//if quote is sellquote
			if($quote->getMine())
			{
				$array[$productname]["buy"]=$quote;
			}
			//if quote is buyquote
			else
			{
				$array[$productname]["sell"]=$quote;
			}
   	}
		
		return $array;
	}
	function getQuickInputStringBasic()
	{
  	$string="";
   	$string.="Vendor\t".$this->getVendor()->getName()."\n";
   	$string.="Pricelistname\t".$this->getName()."\n";
   	$string.="Date\t".$this->getDate()."\n";
		return $string;
	}
	function getQuickInputStringProducttypeHeader()
	{
   	return "\n	pathname	description	category1	category2	category3	category4	category5	category6	category7	category8	category9	category10";
	}
	function getQuickInputStringProductHeader()
	{
   	return "\n	name	description	producttype	sellprice	discrate	discamt	buyprice	discrate	discamt	category1	category2	category3	category4	category5	category6	category7	category8	category9	category10";
	}
  	//for use of pricelist/quickinput
   function getQuickInputString()
   {
   	$string=$this->getQuickInputStringBasic()
   				.$this->getQuickInputStringProducttypeHeader()
   				.$this->getQuickInputStringProductHeader();

		if($this->getId())
   	foreach($this->getQuickInputProductArrays() as $productarray)
   	{
   	
   		$product=$productarray["product"];
		$buyquote=$productarray["buy"]?$productarray["buy"]:new Quote();
		$sellquote=$productarray["sell"]?$productarray["sell"]:new Quote();

	   	$string.="\nproduct\t"
	   		.$product->getName()."\t"
	   		.$product->getDescription()."\t"
	   		.$product->getProducttype()->getPath()."\t"
	   		.$sellquote->getPrice()."\t"
	   		.$sellquote->getDiscrate()."\t"
	   		.$sellquote->getDiscamt()."\t"
	   		.$buyquote->getPrice()."\t"
	   		.$buyquote->getDiscrate()."\t"
	   		.$buyquote->getDiscamt()."\t"
	   		.$product->getCategory1()."\t"
	   		.$product->getCategory2()."\t"
	   		.$product->getCategory3()."\t"
	   		.$product->getCategory4()."\t"
	   		.$product->getCategory5()."\t"
	   		.$product->getCategory6()."\t"
	   		.$product->getCategory7()."\t"
	   		.$product->getCategory8()."\t"
	   		.$product->getCategory9()."\t"
	   		.$product->getCategory10();
	  	}

   	return $string;
   }
	//--------database utils-------------------------------------------
	public function update($array)
	{
		$needsave=false;
		foreach($array as $key=>$value)
			if($this->id=="" or $this[$key]!=$value)
			$needsave=true;

		if($needsave)
		{
			foreach($array as $key=>$value)
			$this[$key]=$value;
			$this->save();
		}
	}
}

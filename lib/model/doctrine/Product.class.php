<?php

/**
 * Product
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Product extends BaseProduct
{
	//--database utils---------------------------------------------------------
	public function update($array)
	{
		$needsave=false;
		foreach($array as $key=>$value)
			if($this[$key]!=$value)
				$needsave=true;

		if($needsave)
		{
			foreach($array as $key=>$value)
				$this[$key]=$value;
			$this->save();
		}
	}
  function cascadeDelete()
  {
    foreach($this->getStock() as $stock)
      $stock->delete();
      
    return $this->delete();
  }

  //--database getters--------------------------------------------------
  function getQuotesByVendorId($vendor_id)
  {
      return Doctrine_Query::create()
        ->from('Quote s')
      	->where('s.product_id = '.$this->getId())
      	->andWhere('s.vendor_id = '.$vendor_id)
      	->andWhere('s.mine = 0')
      	->andWhere('s.is_cancelled = 0')
      	->execute();
  }
  function getQuotes()
  {
      $today=new DateTime();
      date_sub($today, date_interval_create_from_date_string('3 months'));

      return Doctrine_Query::create()
        ->from('Quote s')
      	->where('s.product_id = '.$this->getId())
      	->andWhere('s.mine = 0')
      	->andWhere('s.is_cancelled = 0')
        //limit query to within 3 months ago
      	->andWhere('s.date >= \''.date_format($today, 'Y-m-d').'\'')//limit to past 3 months
      	->execute();
  }
  function getMyQuotes()
  {
      $today=new DateTime();
      date_sub($today, date_interval_create_from_date_string('3 months'));

      return Doctrine_Query::create()
        ->from('Quote s')
      	->where('s.product_id = '.$this->getId())
      	->andWhere('s.mine = 1')
      	->andWhere('s.is_cancelled = 0')
        //limit query to within 3 months ago
      	->andWhere('s.date >= \''.date_format($today, 'Y-m-d').'\'')//limit to past 3 months
      	->execute();
  }
  function getStock($warehouse_id=null)
  {
      $query = Doctrine_Query::create()
        ->from('Stock s')
      	->where('s.product_id = '.$this->getId());

      //return specific warehouse stock as single stock
      if($warehouse_id)
      {
      	$query->andWhere('s.warehouse_id = '.$warehouse_id);
      	return $query->fetchOne();
      }
      //return all stocks as array of stocks
      else
      {
      	return $query->execute();
      }
  }
  //---product module view utils----------------------------------------
  function getCurrentQty()
  {
    //return $this->getStock(SettingsTable::get("default_warehouse_id"))->getCurrentQty();
    $stock= StockTable::fetch(SettingsTable::fetch("default_warehouse_id"),$this->getId());
    return $stock->getCurrentQty();
  }

	//--MODEL RELATIONSHIPS----------------------------------------
  //--recalc prices when quotes change--------------------------------------------------
  function calcBuyPrice(){$this->calcPurchasePrices();}
  function calcPurchasePrices()
  {
		if(!$this->getAutocalcbuyprice())return;
  
  	//get all quotes
  	$quotes=$this->getQuotes();

  	$maxbuy=0;
  	$minbuy=0;

  	//find max sell, max buy, min sell, min buy prices
		if(count($quotes))
		{
			//set prices to values of first quote
			$maxbuy=$quotes[0]->getTotal();
			$minbuy=$quotes[0]->getTotal();

			//adjust prices as higher and lower prices are found
			foreach($quotes as $index=>$quote)
			{
				if($index==0)continue;
				
				if($maxbuy < $quote->getTotal())$maxbuy = $quote->getTotal();
				if($minbuy > $quote->getTotal())$minbuy = $quote->getTotal();
			}
		}
  	//save values
		if($this->getMaxbuyprice()!=$maxbuy or $this->getMinbuyprice()!=$minbuy)
		{
			$this->setMaxbuyprice($maxbuy);
			$this->setMinbuyprice($minbuy);
			$this->save();
		}
  }
  function calcSellPrice(){$this->calcSalePrices();}
  function calcSalePrices()
  {
		if(!$this->getAutocalcsellprice())return;

  	//get all quotes
  	$quotes=$this->getMyQuotes();

  	$maxsell=0;
  	$minsell=0;

  	//find max sell, max sell, min sell, min sell prices
		if(count($quotes))
		{
			//set prices to values of first quote
			$maxsell=$quotes[0]->getTotal();
			$minsell=$quotes[0]->getTotal();

			//adjust prices as higher and lower prices are found
			foreach($quotes as $index=>$quote)
			{
				if($index==0)continue;
				
				if($maxsell < $quote->getTotal())$maxsell = $quote->getTotal();
				if($minsell > $quote->getTotal())$minsell = $quote->getTotal();
			}
		}
  	//save values
		if($this->getMaxsellprice()!=$maxsell or $this->getMinsellprice()!=$minsell)
		{
			$this->setMaxsellprice($maxsell);
			$this->setMinsellprice($minsell);
			$this->save();
		}
  }
  //-----------------------------------------------------
  
}

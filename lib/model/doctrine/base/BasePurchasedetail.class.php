<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Purchasedetail', 'doctrine');

/**
 * BasePurchasedetail
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $purchase_id
 * @property string $description
 * @property decimal $qty
 * @property decimal $price
 * @property decimal $sellprice
 * @property decimal $total
 * @property decimal $tax
 * @property integer $product_id
 * @property string $barcode
 * @property string $discrate
 * @property decimal $discamt
 * @property decimal $unittotal
 * @property integer $is_cancelled
 * @property Product $Product
 * @property Purchase $Purchase
 * 
 * @method integer        getId()           Returns the current record's "id" value
 * @method integer        getPurchaseId()   Returns the current record's "purchase_id" value
 * @method string         getDescription()  Returns the current record's "description" value
 * @method decimal        getQty()          Returns the current record's "qty" value
 * @method decimal        getPrice()        Returns the current record's "price" value
 * @method decimal        getSellprice()    Returns the current record's "sellprice" value
 * @method decimal        getTotal()        Returns the current record's "total" value
 * @method decimal        getTax()          Returns the current record's "tax" value
 * @method integer        getProductId()    Returns the current record's "product_id" value
 * @method string         getBarcode()      Returns the current record's "barcode" value
 * @method string         getDiscrate()     Returns the current record's "discrate" value
 * @method decimal        getDiscamt()      Returns the current record's "discamt" value
 * @method decimal        getUnittotal()    Returns the current record's "unittotal" value
 * @method integer        getIsCancelled()  Returns the current record's "is_cancelled" value
 * @method Product        getProduct()      Returns the current record's "Product" value
 * @method Purchase       getPurchase()     Returns the current record's "Purchase" value
 * @method Purchasedetail setId()           Sets the current record's "id" value
 * @method Purchasedetail setPurchaseId()   Sets the current record's "purchase_id" value
 * @method Purchasedetail setDescription()  Sets the current record's "description" value
 * @method Purchasedetail setQty()          Sets the current record's "qty" value
 * @method Purchasedetail setPrice()        Sets the current record's "price" value
 * @method Purchasedetail setSellprice()    Sets the current record's "sellprice" value
 * @method Purchasedetail setTotal()        Sets the current record's "total" value
 * @method Purchasedetail setTax()          Sets the current record's "tax" value
 * @method Purchasedetail setProductId()    Sets the current record's "product_id" value
 * @method Purchasedetail setBarcode()      Sets the current record's "barcode" value
 * @method Purchasedetail setDiscrate()     Sets the current record's "discrate" value
 * @method Purchasedetail setDiscamt()      Sets the current record's "discamt" value
 * @method Purchasedetail setUnittotal()    Sets the current record's "unittotal" value
 * @method Purchasedetail setIsCancelled()  Sets the current record's "is_cancelled" value
 * @method Purchasedetail setProduct()      Sets the current record's "Product" value
 * @method Purchasedetail setPurchase()     Sets the current record's "Purchase" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePurchasedetail extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('purchasedetail');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('purchase_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('description', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('qty', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('price', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('sellprice', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('total', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('tax', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('product_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('barcode', 'string', 13, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 13,
             ));
        $this->hasColumn('discrate', 'string', 30, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 30,
             ));
        $this->hasColumn('discamt', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('unittotal', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('is_cancelled', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Product', array(
             'local' => 'product_id',
             'foreign' => 'id'));

        $this->hasOne('Purchase', array(
             'local' => 'purchase_id',
             'foreign' => 'id'));
    }
}
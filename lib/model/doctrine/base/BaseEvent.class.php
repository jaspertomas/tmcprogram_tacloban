<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Event', 'doctrine');

/**
 * BaseEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $type
 * @property string $parent_class
 * @property integer $parent_id
 * @property string $parent_name
 * @property string $child_class
 * @property string $children_id
 * @property date $date
 * @property decimal $amount
 * @property string $detail1
 * @property string $detail2
 * @property string $detail3
 * @property string $notes
 * @property integer $is_cancelled
 * @property date $checkcleardate
 * 
 * @method integer getId()             Returns the current record's "id" value
 * @method string  getType()           Returns the current record's "type" value
 * @method string  getParentClass()    Returns the current record's "parent_class" value
 * @method integer getParentId()       Returns the current record's "parent_id" value
 * @method string  getParentName()     Returns the current record's "parent_name" value
 * @method string  getChildClass()     Returns the current record's "child_class" value
 * @method string  getChildrenId()     Returns the current record's "children_id" value
 * @method date    getDate()           Returns the current record's "date" value
 * @method decimal getAmount()         Returns the current record's "amount" value
 * @method string  getDetail1()        Returns the current record's "detail1" value
 * @method string  getDetail2()        Returns the current record's "detail2" value
 * @method string  getDetail3()        Returns the current record's "detail3" value
 * @method string  getNotes()          Returns the current record's "notes" value
 * @method integer getIsCancelled()    Returns the current record's "is_cancelled" value
 * @method date    getCheckcleardate() Returns the current record's "checkcleardate" value
 * @method Event   setId()             Sets the current record's "id" value
 * @method Event   setType()           Sets the current record's "type" value
 * @method Event   setParentClass()    Sets the current record's "parent_class" value
 * @method Event   setParentId()       Sets the current record's "parent_id" value
 * @method Event   setParentName()     Sets the current record's "parent_name" value
 * @method Event   setChildClass()     Sets the current record's "child_class" value
 * @method Event   setChildrenId()     Sets the current record's "children_id" value
 * @method Event   setDate()           Sets the current record's "date" value
 * @method Event   setAmount()         Sets the current record's "amount" value
 * @method Event   setDetail1()        Sets the current record's "detail1" value
 * @method Event   setDetail2()        Sets the current record's "detail2" value
 * @method Event   setDetail3()        Sets the current record's "detail3" value
 * @method Event   setNotes()          Sets the current record's "notes" value
 * @method Event   setIsCancelled()    Sets the current record's "is_cancelled" value
 * @method Event   setCheckcleardate() Sets the current record's "checkcleardate" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEvent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('event');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('type', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('parent_class', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('parent_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('parent_name', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('child_class', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('children_id', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('date', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('amount', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('detail1', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('detail2', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('detail3', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('notes', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('is_cancelled', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('checkcleardate', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}
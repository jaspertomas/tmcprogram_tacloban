<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Journal', 'doctrine');

/**
 * BaseJournal
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property enum $type
 * @property integer $period_id
 * @property integer $fund_id
 * @property string $accountno
 * @property string $priorityaccounts
 * @property string $author
 * @property string $preparedby1
 * @property string $preparedby2
 * @property string $certifiedby1
 * @property string $certifiedby2
 * @property integer $is_approved
 * @property Doctrine_Collection $JournalEntry
 * 
 * @method integer             getId()               Returns the current record's "id" value
 * @method string              getName()             Returns the current record's "name" value
 * @method enum                getType()             Returns the current record's "type" value
 * @method integer             getPeriodId()         Returns the current record's "period_id" value
 * @method integer             getFundId()           Returns the current record's "fund_id" value
 * @method string              getAccountno()        Returns the current record's "accountno" value
 * @method string              getPriorityaccounts() Returns the current record's "priorityaccounts" value
 * @method string              getAuthor()           Returns the current record's "author" value
 * @method string              getPreparedby1()      Returns the current record's "preparedby1" value
 * @method string              getPreparedby2()      Returns the current record's "preparedby2" value
 * @method string              getCertifiedby1()     Returns the current record's "certifiedby1" value
 * @method string              getCertifiedby2()     Returns the current record's "certifiedby2" value
 * @method integer             getIsApproved()       Returns the current record's "is_approved" value
 * @method Doctrine_Collection getJournalEntry()     Returns the current record's "JournalEntry" collection
 * @method Journal             setId()               Sets the current record's "id" value
 * @method Journal             setName()             Sets the current record's "name" value
 * @method Journal             setType()             Sets the current record's "type" value
 * @method Journal             setPeriodId()         Sets the current record's "period_id" value
 * @method Journal             setFundId()           Sets the current record's "fund_id" value
 * @method Journal             setAccountno()        Sets the current record's "accountno" value
 * @method Journal             setPriorityaccounts() Sets the current record's "priorityaccounts" value
 * @method Journal             setAuthor()           Sets the current record's "author" value
 * @method Journal             setPreparedby1()      Sets the current record's "preparedby1" value
 * @method Journal             setPreparedby2()      Sets the current record's "preparedby2" value
 * @method Journal             setCertifiedby1()     Sets the current record's "certifiedby1" value
 * @method Journal             setCertifiedby2()     Sets the current record's "certifiedby2" value
 * @method Journal             setIsApproved()       Sets the current record's "is_approved" value
 * @method Journal             setJournalEntry()     Sets the current record's "JournalEntry" collection
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseJournal extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('journal');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('type', 'enum', 23, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Cash Receipt',
              1 => 'Cheque Disbursement',
              2 => 'Cash Disbursement',
              3 => 'Gen Journal Adjustment',
              4 => 'Gen Journal Liquidation',
              5 => 'Other',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 23,
             ));
        $this->hasColumn('period_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('fund_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('accountno', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('priorityaccounts', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('author', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('preparedby1', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('preparedby2', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('certifiedby1', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('certifiedby2', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('is_approved', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('JournalEntry', array(
             'local' => 'id',
             'foreign' => 'journal_id'));
    }
}
<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Product', 'doctrine');

/**
 * BaseProduct
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property integer $brand_id
 * @property integer $producttype_id
 * @property decimal $qty
 * @property decimal $minbuyprice
 * @property decimal $maxbuyprice
 * @property decimal $minsellprice
 * @property decimal $maxsellprice
 * @property string $description
 * @property string $category1
 * @property string $category2
 * @property string $category3
 * @property string $category4
 * @property string $category5
 * @property string $category6
 * @property string $category7
 * @property string $category8
 * @property string $category9
 * @property string $category10
 * @property integer $publish
 * @property integer $autocalcsellprice
 * @property integer $autocalcbuyprice
 * @property integer $monitored
 * @property string $barcode
 * @property integer $is_service
 * @property Brand $Brand
 * @property Producttype $Producttype
 * @property Doctrine_Collection $Invoicedetail
 * @property Doctrine_Collection $Purchasedetail
 * @property Doctrine_Collection $Quote
 * @property Doctrine_Collection $Stock
 * 
 * @method integer             getId()                Returns the current record's "id" value
 * @method string              getName()              Returns the current record's "name" value
 * @method integer             getBrandId()           Returns the current record's "brand_id" value
 * @method integer             getProducttypeId()     Returns the current record's "producttype_id" value
 * @method decimal             getQty()               Returns the current record's "qty" value
 * @method decimal             getMinbuyprice()       Returns the current record's "minbuyprice" value
 * @method decimal             getMaxbuyprice()       Returns the current record's "maxbuyprice" value
 * @method decimal             getMinsellprice()      Returns the current record's "minsellprice" value
 * @method decimal             getMaxsellprice()      Returns the current record's "maxsellprice" value
 * @method string              getDescription()       Returns the current record's "description" value
 * @method string              getCategory1()         Returns the current record's "category1" value
 * @method string              getCategory2()         Returns the current record's "category2" value
 * @method string              getCategory3()         Returns the current record's "category3" value
 * @method string              getCategory4()         Returns the current record's "category4" value
 * @method string              getCategory5()         Returns the current record's "category5" value
 * @method string              getCategory6()         Returns the current record's "category6" value
 * @method string              getCategory7()         Returns the current record's "category7" value
 * @method string              getCategory8()         Returns the current record's "category8" value
 * @method string              getCategory9()         Returns the current record's "category9" value
 * @method string              getCategory10()        Returns the current record's "category10" value
 * @method integer             getPublish()           Returns the current record's "publish" value
 * @method integer             getAutocalcsellprice() Returns the current record's "autocalcsellprice" value
 * @method integer             getAutocalcbuyprice()  Returns the current record's "autocalcbuyprice" value
 * @method integer             getMonitored()         Returns the current record's "monitored" value
 * @method string              getBarcode()           Returns the current record's "barcode" value
 * @method integer             getIsService()         Returns the current record's "is_service" value
 * @method Brand               getBrand()             Returns the current record's "Brand" value
 * @method Producttype         getProducttype()       Returns the current record's "Producttype" value
 * @method Doctrine_Collection getInvoicedetail()     Returns the current record's "Invoicedetail" collection
 * @method Doctrine_Collection getPurchasedetail()    Returns the current record's "Purchasedetail" collection
 * @method Doctrine_Collection getQuote()             Returns the current record's "Quote" collection
 * @method Doctrine_Collection getStock()             Returns the current record's "Stock" collection
 * @method Product             setId()                Sets the current record's "id" value
 * @method Product             setName()              Sets the current record's "name" value
 * @method Product             setBrandId()           Sets the current record's "brand_id" value
 * @method Product             setProducttypeId()     Sets the current record's "producttype_id" value
 * @method Product             setQty()               Sets the current record's "qty" value
 * @method Product             setMinbuyprice()       Sets the current record's "minbuyprice" value
 * @method Product             setMaxbuyprice()       Sets the current record's "maxbuyprice" value
 * @method Product             setMinsellprice()      Sets the current record's "minsellprice" value
 * @method Product             setMaxsellprice()      Sets the current record's "maxsellprice" value
 * @method Product             setDescription()       Sets the current record's "description" value
 * @method Product             setCategory1()         Sets the current record's "category1" value
 * @method Product             setCategory2()         Sets the current record's "category2" value
 * @method Product             setCategory3()         Sets the current record's "category3" value
 * @method Product             setCategory4()         Sets the current record's "category4" value
 * @method Product             setCategory5()         Sets the current record's "category5" value
 * @method Product             setCategory6()         Sets the current record's "category6" value
 * @method Product             setCategory7()         Sets the current record's "category7" value
 * @method Product             setCategory8()         Sets the current record's "category8" value
 * @method Product             setCategory9()         Sets the current record's "category9" value
 * @method Product             setCategory10()        Sets the current record's "category10" value
 * @method Product             setPublish()           Sets the current record's "publish" value
 * @method Product             setAutocalcsellprice() Sets the current record's "autocalcsellprice" value
 * @method Product             setAutocalcbuyprice()  Sets the current record's "autocalcbuyprice" value
 * @method Product             setMonitored()         Sets the current record's "monitored" value
 * @method Product             setBarcode()           Sets the current record's "barcode" value
 * @method Product             setIsService()         Sets the current record's "is_service" value
 * @method Product             setBrand()             Sets the current record's "Brand" value
 * @method Product             setProducttype()       Sets the current record's "Producttype" value
 * @method Product             setInvoicedetail()     Sets the current record's "Invoicedetail" collection
 * @method Product             setPurchasedetail()    Sets the current record's "Purchasedetail" collection
 * @method Product             setQuote()             Sets the current record's "Quote" collection
 * @method Product             setStock()             Sets the current record's "Stock" collection
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProduct extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('product');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('brand_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('producttype_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('qty', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('minbuyprice', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('maxbuyprice', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('minsellprice', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('maxsellprice', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('category1', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('category2', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('category3', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('category4', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('category5', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('category6', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('category7', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('category8', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('category9', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('category10', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('publish', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('autocalcsellprice', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('autocalcbuyprice', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('monitored', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('barcode', 'string', 13, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 13,
             ));
        $this->hasColumn('is_service', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Brand', array(
             'local' => 'brand_id',
             'foreign' => 'id'));

        $this->hasOne('Producttype', array(
             'local' => 'producttype_id',
             'foreign' => 'id'));

        $this->hasMany('Invoicedetail', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('Purchasedetail', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('Quote', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('Stock', array(
             'local' => 'id',
             'foreign' => 'product_id'));
    }
}
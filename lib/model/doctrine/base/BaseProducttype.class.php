<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Producttype', 'doctrine');

/**
 * BaseProducttype
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $description
 * @property integer $parent_id
 * @property integer $priority
 * @property string $category1
 * @property string $category2
 * @property string $category3
 * @property string $category4
 * @property string $category5
 * @property string $category6
 * @property string $category7
 * @property string $category8
 * @property string $category9
 * @property string $category10
 * @property string $path_ids
 * @property string $path
 * @property string $notes
 * @property enum $status
 * @property Doctrine_Collection $Product
 * @property Doctrine_Collection $Productcategory
 * 
 * @method integer             getId()              Returns the current record's "id" value
 * @method string              getName()            Returns the current record's "name" value
 * @method string              getDescription()     Returns the current record's "description" value
 * @method integer             getParentId()        Returns the current record's "parent_id" value
 * @method integer             getPriority()        Returns the current record's "priority" value
 * @method string              getCategory1()       Returns the current record's "category1" value
 * @method string              getCategory2()       Returns the current record's "category2" value
 * @method string              getCategory3()       Returns the current record's "category3" value
 * @method string              getCategory4()       Returns the current record's "category4" value
 * @method string              getCategory5()       Returns the current record's "category5" value
 * @method string              getCategory6()       Returns the current record's "category6" value
 * @method string              getCategory7()       Returns the current record's "category7" value
 * @method string              getCategory8()       Returns the current record's "category8" value
 * @method string              getCategory9()       Returns the current record's "category9" value
 * @method string              getCategory10()      Returns the current record's "category10" value
 * @method string              getPathIds()         Returns the current record's "path_ids" value
 * @method string              getPath()            Returns the current record's "path" value
 * @method string              getNotes()           Returns the current record's "notes" value
 * @method enum                getStatus()          Returns the current record's "status" value
 * @method Doctrine_Collection getProduct()         Returns the current record's "Product" collection
 * @method Doctrine_Collection getProductcategory() Returns the current record's "Productcategory" collection
 * @method Producttype         setId()              Sets the current record's "id" value
 * @method Producttype         setName()            Sets the current record's "name" value
 * @method Producttype         setDescription()     Sets the current record's "description" value
 * @method Producttype         setParentId()        Sets the current record's "parent_id" value
 * @method Producttype         setPriority()        Sets the current record's "priority" value
 * @method Producttype         setCategory1()       Sets the current record's "category1" value
 * @method Producttype         setCategory2()       Sets the current record's "category2" value
 * @method Producttype         setCategory3()       Sets the current record's "category3" value
 * @method Producttype         setCategory4()       Sets the current record's "category4" value
 * @method Producttype         setCategory5()       Sets the current record's "category5" value
 * @method Producttype         setCategory6()       Sets the current record's "category6" value
 * @method Producttype         setCategory7()       Sets the current record's "category7" value
 * @method Producttype         setCategory8()       Sets the current record's "category8" value
 * @method Producttype         setCategory9()       Sets the current record's "category9" value
 * @method Producttype         setCategory10()      Sets the current record's "category10" value
 * @method Producttype         setPathIds()         Sets the current record's "path_ids" value
 * @method Producttype         setPath()            Sets the current record's "path" value
 * @method Producttype         setNotes()           Sets the current record's "notes" value
 * @method Producttype         setStatus()          Sets the current record's "status" value
 * @method Producttype         setProduct()         Sets the current record's "Product" collection
 * @method Producttype         setProductcategory() Sets the current record's "Productcategory" collection
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProducttype extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('producttype');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('description', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('parent_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('priority', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('category1', 'string', 30, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 30,
             ));
        $this->hasColumn('category2', 'string', 30, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 30,
             ));
        $this->hasColumn('category3', 'string', 30, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 30,
             ));
        $this->hasColumn('category4', 'string', 30, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 30,
             ));
        $this->hasColumn('category5', 'string', 30, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 30,
             ));
        $this->hasColumn('category6', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('category7', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('category8', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('category9', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('category10', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('path_ids', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('path', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('notes', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('status', 'enum', 6, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Red',
              1 => 'Orange',
              2 => 'Yellow',
              3 => 'Green',
              4 => 'Blue',
              5 => 'Indigo',
              6 => 'Violet',
             ),
             'primary' => false,
             'default' => 'Red',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 6,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Product', array(
             'local' => 'id',
             'foreign' => 'producttype_id'));

        $this->hasMany('Productcategory', array(
             'local' => 'id',
             'foreign' => 'producttype_id'));
    }
}
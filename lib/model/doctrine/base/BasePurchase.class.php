<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Purchase', 'doctrine');

/**
 * BasePurchase
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $pono
 * @property string $invno
 * @property decimal $total
 * @property string $memo
 * @property decimal $tax
 * @property integer $vendor_id
 * @property string $vendor_name
 * @property integer $terms_id
 * @property integer $employee_id
 * @property integer $template_id
 * @property date $date
 * @property date $datereceived
 * @property date $duedate
 * @property string $vendor_invoice
 * @property string $discrate
 * @property decimal $discamt
 * @property enum $status
 * @property enum $type
 * @property decimal $cash
 * @property decimal $cheque
 * @property decimal $credit
 * @property string $chequeno
 * @property date $chequedate
 * @property decimal $balance
 * @property string $chequedata
 * @property integer $is_inspected
 * @property Employee $Employee
 * @property PurchaseTemplate $PurchaseTemplate
 * @property Terms $Terms
 * @property Vendor $Vendor
 * @property Doctrine_Collection $Purchasedetail
 * 
 * @method integer             getId()               Returns the current record's "id" value
 * @method string              getPono()             Returns the current record's "pono" value
 * @method string              getInvno()            Returns the current record's "invno" value
 * @method decimal             getTotal()            Returns the current record's "total" value
 * @method string              getMemo()             Returns the current record's "memo" value
 * @method decimal             getTax()              Returns the current record's "tax" value
 * @method integer             getVendorId()         Returns the current record's "vendor_id" value
 * @method string              getVendorName()       Returns the current record's "vendor_name" value
 * @method integer             getTermsId()          Returns the current record's "terms_id" value
 * @method integer             getEmployeeId()       Returns the current record's "employee_id" value
 * @method integer             getTemplateId()       Returns the current record's "template_id" value
 * @method date                getDate()             Returns the current record's "date" value
 * @method date                getDatereceived()     Returns the current record's "datereceived" value
 * @method date                getDuedate()          Returns the current record's "duedate" value
 * @method string              getVendorInvoice()    Returns the current record's "vendor_invoice" value
 * @method string              getDiscrate()         Returns the current record's "discrate" value
 * @method decimal             getDiscamt()          Returns the current record's "discamt" value
 * @method enum                getStatus()           Returns the current record's "status" value
 * @method enum                getType()             Returns the current record's "type" value
 * @method decimal             getCash()             Returns the current record's "cash" value
 * @method decimal             getCheque()           Returns the current record's "cheque" value
 * @method decimal             getCredit()           Returns the current record's "credit" value
 * @method string              getChequeno()         Returns the current record's "chequeno" value
 * @method date                getChequedate()       Returns the current record's "chequedate" value
 * @method decimal             getBalance()          Returns the current record's "balance" value
 * @method string              getChequedata()       Returns the current record's "chequedata" value
 * @method integer             getIsInspected()      Returns the current record's "is_inspected" value
 * @method Employee            getEmployee()         Returns the current record's "Employee" value
 * @method PurchaseTemplate    getPurchaseTemplate() Returns the current record's "PurchaseTemplate" value
 * @method Terms               getTerms()            Returns the current record's "Terms" value
 * @method Vendor              getVendor()           Returns the current record's "Vendor" value
 * @method Doctrine_Collection getPurchasedetail()   Returns the current record's "Purchasedetail" collection
 * @method Purchase            setId()               Sets the current record's "id" value
 * @method Purchase            setPono()             Sets the current record's "pono" value
 * @method Purchase            setInvno()            Sets the current record's "invno" value
 * @method Purchase            setTotal()            Sets the current record's "total" value
 * @method Purchase            setMemo()             Sets the current record's "memo" value
 * @method Purchase            setTax()              Sets the current record's "tax" value
 * @method Purchase            setVendorId()         Sets the current record's "vendor_id" value
 * @method Purchase            setVendorName()       Sets the current record's "vendor_name" value
 * @method Purchase            setTermsId()          Sets the current record's "terms_id" value
 * @method Purchase            setEmployeeId()       Sets the current record's "employee_id" value
 * @method Purchase            setTemplateId()       Sets the current record's "template_id" value
 * @method Purchase            setDate()             Sets the current record's "date" value
 * @method Purchase            setDatereceived()     Sets the current record's "datereceived" value
 * @method Purchase            setDuedate()          Sets the current record's "duedate" value
 * @method Purchase            setVendorInvoice()    Sets the current record's "vendor_invoice" value
 * @method Purchase            setDiscrate()         Sets the current record's "discrate" value
 * @method Purchase            setDiscamt()          Sets the current record's "discamt" value
 * @method Purchase            setStatus()           Sets the current record's "status" value
 * @method Purchase            setType()             Sets the current record's "type" value
 * @method Purchase            setCash()             Sets the current record's "cash" value
 * @method Purchase            setCheque()           Sets the current record's "cheque" value
 * @method Purchase            setCredit()           Sets the current record's "credit" value
 * @method Purchase            setChequeno()         Sets the current record's "chequeno" value
 * @method Purchase            setChequedate()       Sets the current record's "chequedate" value
 * @method Purchase            setBalance()          Sets the current record's "balance" value
 * @method Purchase            setChequedata()       Sets the current record's "chequedata" value
 * @method Purchase            setIsInspected()      Sets the current record's "is_inspected" value
 * @method Purchase            setEmployee()         Sets the current record's "Employee" value
 * @method Purchase            setPurchaseTemplate() Sets the current record's "PurchaseTemplate" value
 * @method Purchase            setTerms()            Sets the current record's "Terms" value
 * @method Purchase            setVendor()           Sets the current record's "Vendor" value
 * @method Purchase            setPurchasedetail()   Sets the current record's "Purchasedetail" collection
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePurchase extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('purchase');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('pono', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('invno', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('total', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('memo', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('tax', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('vendor_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('vendor_name', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('terms_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('employee_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('template_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('date', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('datereceived', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('duedate', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('vendor_invoice', 'string', 25, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('discrate', 'string', 30, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 30,
             ));
        $this->hasColumn('discamt', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('status', 'enum', 9, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Pending',
              1 => 'Paid',
              2 => 'Cancelled',
             ),
             'primary' => false,
             'default' => 'Pending',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 9,
             ));
        $this->hasColumn('type', 'enum', 7, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Account',
              1 => 'Cash',
              2 => 'Cheque',
              3 => 'Other',
             ),
             'primary' => false,
             'default' => 'Account',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 7,
             ));
        $this->hasColumn('cash', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('cheque', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('credit', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('chequeno', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('chequedate', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('balance', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('chequedata', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('is_inspected', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Employee', array(
             'local' => 'employee_id',
             'foreign' => 'id'));

        $this->hasOne('PurchaseTemplate', array(
             'local' => 'template_id',
             'foreign' => 'id'));

        $this->hasOne('Terms', array(
             'local' => 'terms_id',
             'foreign' => 'id'));

        $this->hasOne('Vendor', array(
             'local' => 'vendor_id',
             'foreign' => 'id'));

        $this->hasMany('Purchasedetail', array(
             'local' => 'id',
             'foreign' => 'purchase_id'));
    }
}
<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Stock', 'doctrine');

/**
 * BaseStock
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $warehouse_id
 * @property integer $product_id
 * @property decimal $currentqty
 * @property date $date
 * @property decimal $quota
 * @property Warehouse $Warehouse
 * @property Product $Product
 * @property Doctrine_Collection $Stockentry
 * 
 * @method integer             getId()           Returns the current record's "id" value
 * @method integer             getWarehouseId()  Returns the current record's "warehouse_id" value
 * @method integer             getProductId()    Returns the current record's "product_id" value
 * @method decimal             getCurrentqty()   Returns the current record's "currentqty" value
 * @method date                getDate()         Returns the current record's "date" value
 * @method decimal             getQuota()        Returns the current record's "quota" value
 * @method Warehouse           getWarehouse()    Returns the current record's "Warehouse" value
 * @method Product             getProduct()      Returns the current record's "Product" value
 * @method Doctrine_Collection getStockentry()   Returns the current record's "Stockentry" collection
 * @method Stock               setId()           Sets the current record's "id" value
 * @method Stock               setWarehouseId()  Sets the current record's "warehouse_id" value
 * @method Stock               setProductId()    Sets the current record's "product_id" value
 * @method Stock               setCurrentqty()   Sets the current record's "currentqty" value
 * @method Stock               setDate()         Sets the current record's "date" value
 * @method Stock               setQuota()        Sets the current record's "quota" value
 * @method Stock               setWarehouse()    Sets the current record's "Warehouse" value
 * @method Stock               setProduct()      Sets the current record's "Product" value
 * @method Stock               setStockentry()   Sets the current record's "Stockentry" collection
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseStock extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('stock');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('warehouse_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('product_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('currentqty', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('date', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('quota', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Warehouse', array(
             'local' => 'warehouse_id',
             'foreign' => 'id'));

        $this->hasOne('Product', array(
             'local' => 'product_id',
             'foreign' => 'id'));

        $this->hasMany('Stockentry', array(
             'local' => 'id',
             'foreign' => 'stock_id'));
    }
}
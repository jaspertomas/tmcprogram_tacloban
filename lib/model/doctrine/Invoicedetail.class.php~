<?php

/**
 * Invoicedetail
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Invoicedetail extends BaseInvoicedetail
{
  public function calc()
  {
    if($this->getPrice()==0)$this->setDefaultPrice();
    if($this->getDiscrate()!="")
    {
      $discrate=$this->getDiscrate();
      $discrate=str_replace(","," ",$discrate);
      $discrate=str_replace(";"," ",$discrate);
      $discratearray=explode(" ",$this->getDiscrate());
      
      $gross=$this->getQty()*$this->getPrice();
      $total=$gross;
      foreach($discratearray as $rate)
        $total=$total*(1-($rate/100));
      $this->setTotal($total);
    }
    else
    {
      $discamt=$this->getDiscamt();
      $gross=$this->getQty()*$this->getPrice();
      $net=$gross-$discamt;
      $this->setTotal($net);
    }
  }
  public function setDefaultPrice()
  {
    $product=$this->getProduct();
    $this->setPrice($product->getPrice());
  }
  public function updateInventoryEvent()
  {
    //fetch inventory event
    $events=$this->fetchEvents();
    
    //if none, create
    $event=null;
    if(count($events)==0)
    {
      $event=EventTable::generate(array(
              'type'=>"Inventory",
              'parent'=>$this,
                ));
    }
    else
    {
      $event=$events[0];
      $stockentries=$event->getChildren();
      $stockentry=$stockentries[0];
      $stock=$stockentry->getStock();
      
      //if data not the same
      if(
        $stockentry->getQty()!=$this->getQty()*-1 or //negative, coz this is invoice, meaning outgoing
        $stock->getProductId()!=$this->getProductId() 
      )
      {
        //update and calc
        $stockentry->setQty(-$this->getQty());
        
        $oldstock=$stockentry->getStock();
        $newstock=StockTable::fetch($oldstock->getWarehouseId(), $this->getProductId());
        
        $stockentry->setStockId($newstock->getId());
        $stockentry->save();

        $oldstock->calc();
        $newstock->calc();
      }
    } 
  
  }
  public function fetchEvents()
  {
    return EventTable::fetch(array(
            'type'=>"Inventory",
            'parent_id'=>$this->getId(),
            'parent_class'=>get_class($this),
            ));
  }
  public function cascadeDelete()
  {
    //fetch inventory event
    $events=$this->fetchEvents();

    //delete events with associated child objects
    foreach($events as $event)
      $event->cascadeDelete();
    
    return $this->delete();
  }
}

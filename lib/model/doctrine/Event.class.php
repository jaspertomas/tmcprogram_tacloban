<?php

/**
 * Event
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Event extends BaseEvent
{
  public $accountentriesarray=null;
  public $accountids=null;
  public $accounts=null;
  public $events=null;
  function __toString()
  {
    return $this->getType()."-".$this->getDate();
  }
  function getParent()
  {
     return Doctrine_Query::create()
        ->from($this->getParentClass().' e')
        ->where('e.id = '.$this->getParentId())
        ->fetchOne();
  }
  function getDetail($name)
  {
    switch($this->getType())
    {
      //invoice events
      case "BankExp":switch($name)
        {
          case "chequeamt":
            return -$this->getAmount();
          default: 
            return "";

        }break;
      case "ChequeCollect":switch($name)
        {
          case "chequeamt":
            return $this->getAmount();
          case "creditamt":
            return -$this->getAmount();
          case "status":
            return $this->getDetail1();
          default: 
            return "";

        }break;
      
      case "CashCollect":switch($name)
        {
          case "cashamt":
            return $this->getAmount();
          case "creditamt":
            return -$this->getAmount();
          default: 
            return "";

        }break;

      //inventory events
      case "stockin":switch($name)
        {
          default: 
            return "";
        }break;
      case "stockout":switch($name)
        {
          default: 
            return "";
        }break;
      case "stocktrans":switch($name)
        {
          default: 
            return "";
        }break;
    }
  }
  function run()
  {
  }
  function getChildrenIds()
  {
    return explode(" ",$this->getChildrenId());
  }
  function getChildren()
  {
    if($this->getChildClass())
    {
     return Doctrine_Query::create()
      ->from($this->getChildClass()." c")
      ->whereIn('c.id', explode(" ",$this->getChildrenId()))
      ->execute();
    }
  }
  public function delete(Doctrine_Connection $conn=null)
  {
    $parent=$this->getParent();
    if($this->getChildClass())
    {
      foreach($this->getChildren() as $child)
        $child->delete($conn);
    }
      
    $result= parent::delete($conn);

    if($parent)$parent->calc();

    return $result;
  }
	//--status functions--------------------------
	//relationship: product calc adjusts max and min product prices according to quotes
	//if cancelled, ignore
  public function isCancelled(){return $this->getIsCancelled();}
  public function cancel(){$this->setIsCancelled(1);$this->save();}

  //--accounting------------------------------
  function updateParent()
  {
    if($this->getParentClass()=="Purchase" or $this->getParentClass()=="Invoice")
    {    
      $parent=$this->getParent();
      $parent->getUpdateChequedata();
      
  //to show status pending in invoice show if checks not yet cleared:    
  //on event update
    //      if invoice.checkcleardate < event.checkcleardate
	//	invoice.checkcleardate = event.checkcleardate


      if($this->getParentClass()=="Invoice")
      {    
$parentdate=MyDateTime::frommysql($parent->getCheckcleardate());
$date=MyDateTime::frommysql($this->getCheckcleardate());

        if($parentdate->isearlierthan($date))
          $parent->setCheckcleardate($this->getCheckcleardate());
          $parent->calc();
      }
      $parent->save();

    }
  }
  function updateAccountentries()
  {
    $accountentryids=array();
    switch($this->getType())
    {
      //invoice events
      case 'CashCollect':
        $description="Cash Collection";

        $entry=$this->setCashOnHandAccountEntry($this->getAmount(),$description);
        $accountentryids[]=$entry->getId();

        $entry=$this->setReceivablesAccountEntry(-$this->getAmount(),$description);
        $accountentryids[]=$entry->getId();

        break;
      case 'ChequeCollect':
        $description="Check Collection";

        $entry=$this->setInChecksAccountEntry($this->getAmount(),$description);
        $accountentryids[]=$entry->getId();

        $entry=$this->setReceivablesAccountEntry(-$this->getAmount(),$description);
        $accountentryids[]=$entry->getId();

        break;

      //purchase events
      case 'CashPay':
        $description="Cash Payment";

        $entry=$this->setCashOnHandAccountEntry($this->getAmount(),$description);
        $accountentryids[]=$entry->getId();

        $entry=$this->setPayablesAccountEntry(-$this->getAmount(),$description);
        $accountentryids[]=$entry->getId();

        break;
      case 'ChequePay':
        $description="Check Payment";

        $entry=$this->setOutChecksAccountEntry($this->getAmount(),$description);
        $accountentryids[]=$entry->getId();

        $entry=$this->setPayablesAccountEntry(-$this->getAmount(),$description);
        $accountentryids[]=$entry->getId();

        break;

      //all purpose events
      //used by invoice, purchase
      case 'Cancel':
        break;
      default:
        break;
    }
    $this->setChildClass('Accountentry');
    $this->setChildrenId(implode(" ",$accountentryids));
    $this->save();

    //calc invoice / po
    $parent=$this->getParent();
    if(get_class($parent)=="Invoice" or get_class($parent)=="Purchase")
    {
      $parent->calc();
      $parent->save();
    }
  }
  public function getAccountentries($includeevents=false)
  {
      $query= Doctrine_Query::create()
        ->from('Accountentry ae, ae.Account a')
        ->orderBy('date, priority')
        ->where('ae.ref_id = '.$this->getId())
      	->andWhere('ae.ref_class = "Event"')
        ;
      return $query->execute();
  }
    /*
      3 	account_id_cash_on_hand 	3
      4 	account_id_petty_cash 	9
      5 	account_id_payables 	12
      14 	account_id_cash_at_home 	6
      15 	account_id_utilitiesexpense 	7
      16 	account_id_merchandiseexpense 	8
      17 	account_id_salesincome 	10
      18 	account_id_receivables 	11    
      account_id_inchecks
    */
  public function getAccountEntry($settingname,$create=false,$qty=0,$description=null)
  {
    $this->getAccountentriesArray();
    $account_id=SettingsTable::fetch($settingname);
    $entry=$this->accountentriesarray[$account_id];

    //if it does not exist, and "create or update"
    if(!$entry and $create)
    {
      $account=AccountTable::fetchById($account_id);
      $entry=$account->addEntry($this->getDate(),$qty,"Event",$this->getId(),null,$description);
    }
    //if it does exist, and "create or update"
    else if($create)
    {
      $entry->setQty($qty);
      $entry->setBalance(null);
      $entry->save();
      $entry->getAccount()->calcFromAccountentry($entry);
    }
    return $entry;
  }
  public function getCashOnHandAccountEntry()  {return $this->getAccountEntry('account_id_cash_on_hand');}
  public function getPettyCashAccountEntry()  {return $this->getAccountEntry('account_id_petty_cash');}
  public function getPayablesAccountEntry()  {return $this->getAccountEntry('account_id_payables');}
  public function getCashAtHomeAccountEntry()  {return $this->getAccountEntry('account_id_cash_at_home');}
  public function getUtilitiesExpenseAccountEntry()  {return $this->getAccountEntry('account_id_utilitiesexpense');}
  public function getMerchandiseExpenseAccountEntry()  {return $this->getAccountEntry('account_id_merchandiseexpense');}
  public function getSalesAccountEntry()  {return $this->getAccountEntry('account_id_salesincome');}
  public function getReceivablesAccountEntry()  {return $this->getAccountEntry('account_id_receivables');}
  public function getInChecksAccountEntry()  {return $this->getAccountEntry('account_id_inchecks');}
  public function getOutChecksAccountEntry()  {return $this->getAccountEntry('account_id_outchecks');}


  public function setAccountEntry($settingname,$qty,$description)
  {
    //fetch account entry
    return $this->getAccountEntry($settingname,true,$qty,$description);
  }
  public function setCashOnHandAccountEntry($qty,$description)  {return $this->setAccountEntry('account_id_cash_on_hand',$qty,$description);}
  public function setPettyCashAccountEntry($qty,$description)  {return $this->setAccountEntry('account_id_petty_cash',$qty,$description);}
  public function setPayablesAccountEntry($qty,$description)  {return $this->setAccountEntry('account_id_payables',$qty,$description);}
  public function setCashAtHomeAccountEntry($qty,$description)  {return $this->setAccountEntry('account_id_cash_at_home',$qty,$description);}
  public function setUtilitiesExpenseAccountEntry($qty,$description)  {return $this->setAccountEntry('account_id_utilitiesexpense',$qty,$description);}
  public function setMerchandiseExpenseAccountEntry($qty,$description)  {return $this->setAccountEntry('account_id_merchandiseexpense',$qty,$description);}
  public function setSalesAccountEntry($qty,$description)  {return $this->setAccountEntry('account_id_salesincome',$qty,$description);}
  public function setReceivablesAccountEntry($qty,$description)  {return $this->setAccountEntry('account_id_receivables',$qty,$description);}
  public function setInChecksAccountEntry($qty,$description)  {return $this->setAccountEntry('account_id_inchecks',$qty,$description);}
  public function setOutChecksAccountEntry($qty,$description)  {return $this->setAccountEntry('account_id_outchecks',$qty,$description);}

  public function getAccountentriesArray($force=false)
  {
    //if data is already loaded, just return it
    if($this->accountentriesarray!=null and !$force)
    {
      return $this->accountentriesarray;
    }
    
    $accountentries= Doctrine_Query::create()
      ->from('Accountentry a')
      ->where('a.ref_id = '.$this->getId())
    	->andWhere('a.ref_class = "Event"')
      ->orderBy('date, priority')
      ->execute();

    foreach($accountentries as $entry)
    {
      $this->accountentriesarray[$entry->getAccountId()]=$entry;
    }

    return $this->accountentriesarray;
  }

}

<?php

/**
 * Purchase
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Purchase extends BasePurchase
{
  public $accountentriesarray=null;
  public $accountids=null;
  public $accounts=null;
  public $events=null;
  function __toString(){return "PO ".$this->getPono();}
  function getName(){return $this->getPono();}
  function isCancelled(){return $this->getStatus()=="Cancelled";}
  function calc()
  {
    $details=$this->getPurchasedetail();
    $total=0;
    foreach($details as $detail)
    {
      $total+=$detail->getTotal();
    }
    $this->setTotal($total-$this->getDiscamt());

    {//do accounting
      switch($this->getType())
      {
        case "Cash":
          $this->setCash(-$this->getTotal());
          $this->setCheque(0);
          $this->setCredit(0);
          break;
        case "Cheque":
          $this->setCash(0);
          $this->setCheque($this->getTotal());
          $this->setCredit(0);
          break;
        case "Account":
          $this->setCash(0);
          $this->setCheque(0);
          $this->setCredit($this->getTotal());
          break;
        default:
          $description="Mixed Purchase";
          $this->setCash($this->getTotal()-$this->getCheque()-$this->getCredit());
      }
      $this->setMerchandiseExpenseAccountEntry($this->getTotal());

      //if it exists, and >0, update
      //if it doesn't exist, and >0, create
      //if it exists, and 0, delete
      //if it doesn't exist, and 0, do nothing
      if($this->getCash()!=0)
        $this->setCashOnHandAccountEntry(-$this->getCash());
      else if($this->getCashOnHandAccountEntry())
        $this->getCashOnHandAccountEntry()->delete();

      if($this->getCredit()!=0)
        $this->setPayablesAccountEntry($this->getCredit());
      else if($this->getPayablesAccountEntry())
        $this->getPayablesAccountEntry()->delete();

      if($this->getCheque()!=0)
        $this->setOutChecksAccountEntry($this->getCheque());
      else if($this->getOutChecksAccountEntry())
        $this->getOutChecksAccountEntry()->delete();
    }//end do accounting
    {
      //adjust balance according to payables acctentries
      $balance=$this->getPayablesTotal();

      $this->setBalance($balance);
      if($this->getStatus()=="Cancelled");
      else if($this->getTotal()>0 and $balance==0)
        $this->setStatus("Paid");
      else
        $this->setStatus("Pending");
    }
  }
  //--accounting-----------
  public function getPayablesTotal()
  {
    $entries=$this->getPayablesAccountentries();
    $balance=0;
    foreach($entries as $entry)
      $balance+=$entry->getQty();
    return $balance;
  }
  public function getPayablesAccountentries()
  {
      $this->getAccountIds();
      $query= Doctrine_Query::create()
        ->from('Accountentry ae, ae.Account a')
        ->where('ae.ref_id = '.$this->getId())
      	->andWhere('ae.ref_class = "Purchase"')
      	->andWhere('ae.account_id = '.$this->accountids['account_id_payables'])
        ;

      {
        $events=$this->getEvents();
        $event_ids=array();
        foreach($events as $event)$event_ids[]=$event->getId();

        //only if events exist
        if(count($event_ids)>0)
          $query
          	->orWhere('ae.ref_class = "Event"')
            ->andWhereIn('ae.ref_id',$event_ids)
          	->andWhere('ae.account_id = '.$this->accountids['account_id_payables'])
            ;
      }
        
      return $query->execute();
  }
  public function getAccountentries($includeevents=false)
  {//debug
      $this->getAccountIds();
  
      $query= Doctrine_Query::create()
        ->from('Accountentry ae, ae.Account a')
        ->orderBy('created_at, id')
        ->where('ae.ref_id = '.$this->getId())
      	->andWhere('ae.ref_class = "Purchase"')
        ;

      if($includeevents)
      {
        $events=$this->getEvents();
        $event_ids=array();
        foreach($events as $event)$event_ids[]=$event->getId();

        //only if events exist
        if(count($event_ids)>0)
          $query
          	->orWhere('ae.ref_class = "Event"')
            ->andWhereIn('ae.ref_id',$event_ids)
            ;
      }
        
      return $query->execute();
  }
    /*
      3 	account_id_cash_on_hand 	3
      4 	account_id_petty_cash 	9
      5 	account_id_payables 	12
      14 	account_id_cash_at_home 	6
      15 	account_id_utilitiesexpense 	7
      16 	account_id_merchandiseexpense 	8
      17 	account_id_salesincome 	10
      18 	account_id_receivables 	11    
      account_id_inchecks
    */
  public function getAccountIds($force=false)
  {
    if($this->accountids==null or $force)
      $this->accountids=SettingsTable::fetchAll();
    return $this->accountids;
  }
  public function getAccountEntry($settingname,$create=false,$qty=0)
  {
    $this->getAccountentriesArray();
    $this->getAccountIds();
    $account_id=$this->accountids[$settingname];
    $entry=$this->accountentriesarray[$account_id];

    //if it does not exist, and "create or update"
    if(!$entry and $create)
    {
      $account=AccountTable::fetchById($account_id);
      $entry=$account->addEntry($this->getDate(),$qty,"Purchase",$this->getId());
    }
    //if it does exist, and "create or update"
    else if($create)
    {
      $entry->setQty($qty);
      $entry->setBalance(null);
      $entry->save();
      $entry->getAccount()->calcFromAccountentry($entry);
    }
    return $entry;
  }
  public function getCashOnHandAccountEntry()  {return $this->getAccountEntry('account_id_cash_on_hand');}
  public function getPettyCashAccountEntry()  {return $this->getAccountEntry('account_id_petty_cash');}
  public function getPayablesAccountEntry()  {return $this->getAccountEntry('account_id_payables');}
  public function getCashAtHomeAccountEntry()  {return $this->getAccountEntry('account_id_cash_at_home');}
  public function getUtilitiesExpenseAccountEntry()  {return $this->getAccountEntry('account_id_utilitiesexpense');}
  public function getMerchandiseExpenseAccountEntry()  {return $this->getAccountEntry('account_id_merchandiseexpense');}
  public function getSalesAccountEntry()  {return $this->getAccountEntry('account_id_salesincome');}
  public function getReceivablesAccountEntry()  {return $this->getAccountEntry('account_id_receivables');}
  public function getInChecksAccountEntry()  {return $this->getAccountEntry('account_id_inchecks');}
  public function getOutChecksAccountEntry()  {return $this->getAccountEntry('account_id_outchecks');}


  public function setAccountEntry($settingname,$qty)
  {
    //fetch account entry
    return $this->getAccountEntry($settingname,true,$qty);
  }
  public function setCashOnHandAccountEntry($qty)  {return $this->setAccountEntry('account_id_cash_on_hand',$qty);}
  public function setPettyCashAccountEntry($qty)  {return $this->setAccountEntry('account_id_petty_cash',$qty);}
  public function setPayablesAccountEntry($qty)  {return $this->setAccountEntry('account_id_payables',$qty);}
  public function setCashAtHomeAccountEntry($qty)  {return $this->setAccountEntry('account_id_cash_at_home',$qty);}
  public function setUtilitiesExpenseAccountEntry($qty)  {return $this->setAccountEntry('account_id_utilitiesexpense',$qty);}
  public function setMerchandiseExpenseAccountEntry($qty)  {return $this->setAccountEntry('account_id_merchandiseexpense',$qty);}
  public function setSalesAccountEntry($qty)  {return $this->setAccountEntry('account_id_salesincome',$qty);}
  public function setReceivablesAccountEntry($qty)  {return $this->setAccountEntry('account_id_receivables',$qty);}
  public function setInChecksAccountEntry($qty)  {return $this->setAccountEntry('account_id_inchecks',$qty);}
  public function setOutChecksAccountEntry($qty)  {return $this->setAccountEntry('account_id_outchecks',$qty);}

  public function getAccountentriesArray($force=false)
  {
    //if data is already loaded, just return it
    if($this->accountentriesarray!=null and !$force)
    {
      return $this->accountentriesarray;
    }
    
    $accountentries= Doctrine_Query::create()
      ->from('Accountentry a')
      ->where('a.ref_id = '.$this->getId())
    	->andWhere('a.ref_class = "Purchase"')
      ->orderBy('date, priority')
      ->execute();

    foreach($accountentries as $entry)
    {
      $this->accountentriesarray[$entry->getAccountId()]=$entry;
    }

    return $this->accountentriesarray;
  }
  function getEvents()
  {
    return Doctrine_Query::create()
      ->from('Event e')
      ->where('e.parent_class = "Purchase"')
      ->andWhere('e.parent_id = '.$this->getId())

      ->execute();
  }
  function getPurchasedetails()
  {
      return Doctrine_Query::create()
        ->from('Purchasedetail i, i.Product p')
        ->where('i.purchase_id = '.$this->getId())
        ->execute();
    
  }
  function getParticularsString()
  {
    $array=array();
    foreach($this->getPurchasedetail() as $detail)
    {
      $string=$detail->getProduct()->getName();
      if($detail->getQty()<0)$string.=" (return)";

      $array[]=$string;
    }
    return implode(", ",$array);
  }
  function getUpdateChequedata()
  {
	  $cheques=$this->getChequepayments();
	  $chequedata=array();
	  if($this->getChequeno())
	    $chequedata[]=$this->getChequeno()." (P".$this->getCheque()." ".$this->getChequedate().")";
	  
	  foreach($cheques as $cheque)
	  {
		  $chequedata[]=$cheque->getDetail1()." (P".$cheque->getAmount()." ".$cheque->getDetail2().") ";
	  }
    $this->setChequedata(implode(", ",$chequedata));
  }
  function getChequepayments()
  {
	  $cheques=Doctrine_Query::create()
          ->from('Event e')
          ->orderBy('date')
          ->where('e.type = "ChequePay"')
        	->andWhere('e.parent_class = "Purchase"')
        	->andWhere('e.parent_id = '.$this->getId())
        	->execute()
          ;
	  return $cheques;
  }
}
